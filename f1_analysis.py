# -*- coding: utf-8 -*-
"""F1 Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I2hnqP4cYLJjGMQqBhEDyBPAho3lK3U2

Portfolio Structure
1. Race Outcome Prediction

Use historical F1 data to build a machine learning model predicting race results.
Apply regression models to predict lap times or classification models for podium finishes.

2. Driver Performance Analysis

Analyze lap time consistency, tire degradation, and race pace.
Compare drivers across different circuits using visualization.

3. Pit Stop Strategy Optimization

Investigate pit stop timing and tire selection to find optimal strategies.
Use clustering techniques to group race strategies.

4. Track-Specific Insights

Study how weather, track layout, and historical data affect performance.
Generate circuit-specific insights.
"""

pip install fastf1 matplotlib pandas numpy seaborn

"""
# Formula 1 Data Analysis with FastF1

This Jupyter Notebook analyzes Formula 1 race data, including lap times, tire strategies, and overtakes.
"""

import os
import fastf1
import fastf1.plotting
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Ensure cache directory exists
if not os.path.exists("cache"):
    os.makedirs("cache")

# Enable caching for faster data loading
fastf1.Cache.enable_cache('cache')

# Load race data (Choose a recent race, e.g., 2023 Abu Dhabi GP)
race = fastf1.get_session(2023, 'Abu Dhabi', 'R')
race.load()

if race is None:
    raise ValueError("Error: Race data not found. Check the event name and year.")

# Select drivers for comparison
drivers = ['VER', 'LEC']

# Get lap data for selected drivers
laps = race.laps[race.laps['Driver'].isin(drivers)]

# Ensure lap times are not null and convert to seconds
laps = laps.dropna(subset=['LapTime'])
laps['LapTime'] = laps['LapTime'].dt.total_seconds()

# Plot lap times
plt.figure(figsize=(10,5))
for driver in drivers:
    driver_laps = laps[laps['Driver'] == driver]
    plt.plot(driver_laps['LapNumber'], driver_laps['LapTime'], label=driver)

plt.xlabel("Lap Number")
plt.ylabel("Lap Time (seconds)")
plt.title("Lap Time Comparison - Abu Dhabi GP 2023")
plt.legend()
plt.show()

# Analyze Tire Strategies
pit_stops = race.laps[["Driver", "LapNumber", "Compound"]].drop_duplicates()

plt.figure(figsize=(10, 5))
sns.scatterplot(data=pit_stops, x="LapNumber", y="Driver", hue="Compound", palette="Set2", size=100, legend="full")
plt.xlabel("Lap Number")
plt.ylabel("Driver")
plt.title("Tire Strategy - Abu Dhabi GP 2023")
plt.legend(title="Tire Compound")
plt.show()

# Overtakes Analysis
positions = race.laps[["LapNumber", "Driver", "Position"]].drop_duplicates()
positions['PositionChange'] = positions.groupby('Driver')['Position'].diff().fillna(0)
overtakes = positions[positions['PositionChange'] < 0]

overtakes

# prompt: Using dataframe overtakes: overtakes vs laps for Max Verstappen

# Create a new dataframe containing only Max Verstappen's data
verstappen_overtakes = overtakes[overtakes['Driver'] == 'VER']

# Group by lap number and count the number of overtakes per lap
overtakes_per_lap = verstappen_overtakes.groupby('LapNumber')['PositionChange'].count()


# Display the result
overtakes_per_lap

import fastf1
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Enable caching for faster data retrieval
fastf1.Cache.enable_cache('cache')

# Load historical race data
year = 2023  # Change as needed
race = fastf1.get_session(year, 'Abu Dhabi', 'R')
race.load()

# Prepare dataset for model
laps = race.laps[['Driver', 'LapNumber', 'LapTime', 'Compound', 'TyreLife', 'Position']].dropna()
laps['LapTime'] = laps['LapTime'].dt.total_seconds()

# Feature selection
features = ['LapNumber', 'LapTime', 'TyreLife']
X = laps[features]
y = laps['Position']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Visualization
sns.scatterplot(x=laps['LapNumber'], y=laps['LapTime'], hue=laps['Position'], palette='viridis')
plt.xlabel("Lap Number")
plt.ylabel("Lap Time (seconds)")
plt.title("Lap Time vs Lap Number by Position")
plt.show()

"""1. Identify Performance Trends
Consistent Lap Times: If a driver’s lap times are steady, it indicates good pace management.
Increasing Lap Times: Suggests tire degradation or race strategy changes (e.g., fuel weight affecting performance).
Decreasing Lap Times: Could indicate an undercut strategy, where the driver gains time after a pit stop.
2. Compare Position vs. Lap Time
Faster Drivers (Lower Lap Times): Likely at the front (lower position values).
Midfield Battles: Overlapping points across different positions suggest close competition.
Outliers: If some drivers have sudden spikes in lap time, it may indicate an incident or a slow lap due to track conditions.
3. Tire Strategy Analysis
Lap Time Drops After Pit Stops: A significant decrease in lap time suggests a fresh tire stint.
Longer Stint Degradation: If lap times gradually increase, it indicates tire wear over time.
4. Impact of Safety Cars & Pit Windows
If there is a sudden jump in lap times at a certain lap number across all drivers, it might be due to a safety car period.
1. Initial Spike in Lap Time
The first few laps show significantly higher lap times. This could be due to:
A formation lap before the race starts.
A safety car or slower pace at the start.
2. General Downward Trend
After the first few laps, lap times stabilize, with most drivers maintaining a pace around 90 seconds.
This suggests the field is running consistently after settling into the race.
3. Scatter at the Top (Higher Lap Times)
The points above 110 seconds indicate very slow laps. Possible reasons:
Pit stops causing a slower out-lap.
Incidents or off-track moments leading to lost time.
Drivers serving penalties or retiring.
4. Positions and Performance
Lower positions (yellow, green dots) seem to have more variation in lap times, meaning midfield and backmarker battles are more inconsistent.
Higher positions (darker dots) show a tighter lap time range, meaning frontrunners had a more controlled race.

Next Steps for Deeper Analysis
1. Overlay pit stop data to confirm if the high lap times are due to pit stops?
2. Color by tire compound to analyze how tire choice affects lap times?
3. Look at driver-specific trends to see how individual performances varied?
"""

import fastf1
import fastf1.plotting
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Enable caching
fastf1.Cache.enable_cache('cache')

# Load race session data
race = fastf1.get_session(2023, 'Abu Dhabi', 'R')
race.load()

# Get lap data and convert lap time to seconds
laps = race.laps[['Driver', 'LapNumber', 'LapTime', 'Compound', 'Position']].dropna()
laps['LapTime'] = laps['LapTime'].dt.total_seconds()

# Extract pit stop lap numbers
pit_stops = race.laps[race.laps['PitInTime'].notna()][['Driver', 'LapNumber']]

# Merge to get lap times for pit stops
pit_stop_lap_times = pit_stops.merge(laps, on=['Driver', 'LapNumber'], how='left')

# Define color mapping for tire compounds
compound_colors = {
    'SOFT': 'red',
    'MEDIUM': 'yellow',
    'HARD': 'white',
    'INTERMEDIATE': 'green',
    'WET': 'blue'
}

# Create the scatter plot
plt.figure(figsize=(10,5))
sns.scatterplot(data=laps, x="LapNumber", y="LapTime", hue="Compound",
                palette=compound_colors, edgecolor="black", alpha=0.8)

# Overlay pit stops with red "X" markers
plt.scatter(pit_stop_lap_times['LapNumber'], pit_stop_lap_times['LapTime'],
            color='black', marker='x', s=100, label="Pit Stops")

# Labels and title
plt.xlabel("Lap Number")
plt.ylabel("Lap Time (seconds)")
plt.title("Lap Time vs Lap Number with Tire Compounds & Pit Stops")
plt.legend(title="Tire Compound")
plt.show()

"""Expected Insights from This Plot:
Tire degradation: Do Soft tires have increasing lap times over a stint?
Pit strategy: Are pit stops associated with a change in tire compound?
Performance difference: Are Soft tires consistently faster than Medium/Hard tires?
"""

import fastf1
import fastf1.plotting
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Enable caching
fastf1.Cache.enable_cache('cache')

# Load race session data
race = fastf1.get_session(2023, 'Abu Dhabi', 'R')
race.load()

# Get lap data and convert lap time to seconds
laps = race.laps[['Driver', 'LapNumber', 'LapTime', 'Compound', 'Position']].dropna()
laps['LapTime'] = laps['LapTime'].dt.total_seconds()

# Extract pit stop lap numbers
pit_stops = race.laps[race.laps['PitInTime'].notna()][['Driver', 'LapNumber']]

# Merge to get lap times for pit stops
pit_stop_lap_times = pit_stops.merge(laps, on=['Driver', 'LapNumber'], how='left')

# Get lap times immediately after a pit stop (lap after pitting)
pit_stop_lap_times['PostPitLap'] = pit_stop_lap_times['LapNumber'] + 1
post_pit_laps = pit_stop_lap_times.merge(laps, left_on=['Driver', 'PostPitLap'],
                                          right_on=['Driver', 'LapNumber'],
                                          suffixes=('_Pit', '_PostPit'))

# Define color mapping for tire compounds
compound_colors = {
    'SOFT': 'red',
    'MEDIUM': 'yellow',
    'HARD': 'white',
    'INTERMEDIATE': 'green',
    'WET': 'blue'
}

# Create the scatter plot for lap times
plt.figure(figsize=(12, 6))
sns.scatterplot(data=laps, x="LapNumber", y="LapTime", hue="Driver", palette="tab10", alpha=0.7)

# Overlay pit stops with "X" markers
plt.scatter(pit_stop_lap_times['LapNumber'], pit_stop_lap_times['LapTime'],
            color='black', marker='x', s=100, label="Pit Stops")

# Overlay post-pit lap times with "o" markers to track lap time drop
plt.scatter(post_pit_laps['LapNumber_PostPit'], post_pit_laps['LapTime_PostPit'],
            color='red', marker='o', s=80, label="Lap After Pit")

# Split early vs. late pit stops and visualize
early_pits = pit_stop_lap_times[pit_stop_lap_times['LapNumber'] < 20]
late_pits = pit_stop_lap_times[pit_stop_lap_times['LapNumber'] >= 20]

plt.scatter(early_pits['LapNumber'], early_pits['LapTime'], color='blue', marker='s', s=90, label="Early Pit (<Lap 20)")
plt.scatter(late_pits['LapNumber'], late_pits['LapTime'], color='purple', marker='D', s=90, label="Late Pit (>=Lap 20)")

# Labels and title
plt.xlabel("Lap Number")
plt.ylabel("Lap Time (seconds)")
plt.title("Lap Time vs Lap Number with Pit Stops and Strategy Analysis")
plt.legend(title="Legend", loc="upper right", bbox_to_anchor=(1.3, 1))
plt.show()

"""1️⃣ Highlight Multiple Drivers Separately
Right now, all drivers' lap times are plotted together. We can color each driver differently using hue="Driver" in Seaborn.

2️⃣ Track Lap Time Drop After Pit Stops
To analyze the effect of pit stops on lap time, we:

Identify the lap before and after each pit stop.
Highlight post-pit lap times to see if they decrease.

3️⃣ Compare Early vs. Late Pit Strategies
Split drivers into those who pitted early (LapNumber < 20) and late (LapNumber >= 20).
Use different markers to visualize strategy differences.

🔍 What This Code Does:

✅ Highlights drivers separately with hue="Driver".

✅ Marks pit stops with black "X" markers.

✅ Marks lap time after a pit stop with red "O" markers.

✅ Splits early vs. late pitters, marking:
*   Early pits (< Lap 20) with blue squares (s markers).
*   Late pits (>= Lap 20) with purple diamonds (D markers).

🚀 Insights You Can Now Gain:

🔹 Do drivers get faster after pitting? → Look at red "O" markers.

🔹 Do early pitters have an advantage? → Compare blue vs. purple markers.

🔹 How does tire choice affect performance? → Look at lap time trends.




"""